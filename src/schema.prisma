// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

////////////////////////////////////////////////////////// Module User Management //////////////////////////////////////////////////////////

enum Gender {
  MALE
  FEMALE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model User {
  id              Int        @id @default(autoincrement())
  firstname       String
  lastname        String
  gender          Gender
  username        String     @unique
  address         String?
  phone           String?
  status          UserStatus @default(ACTIVE)
  email           String     @unique
  password        String
  avatar          String?
  isEmailVerified Boolean    @default(false)
  isBlocked       Boolean    @default(false)
  lastLogin       DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  deletedAt       DateTime?

  // Relations
  roles       RoleUser[]
  permissions UserPermission[]
  groups      GroupUser[]

  @@index([username, firstname, lastname, email])
}

model Group {
  id          Int         @id @default(autoincrement())
  groupName   String      @unique
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  // Relations
  users       GroupUser[]
  GroupRole   GroupRole[]

  @@index([groupName])
}

model Role {
  id          Int              @id @default(autoincrement())
  roleLabel   String           @unique
  description String?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  // Relations
  users       RoleUser[]
  permissions RolePermission[]
  GroupRole   GroupRole[]

  @@index([roleLabel])
}

model Permission {
  id              Int              @id @default(autoincrement())
  permissionLabel String           @unique
  description     String?
  category        String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  // Relations
  roles           RolePermission[]
  users           UserPermission[]

  @@index([permissionLabel])
}

model GroupUser {
  id        Int       @id @default(autoincrement())
  group     Group     @relation(fields: [groupId], references: [id])
  groupId   Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([groupId, userId])
  @@index([groupId, userId])
}

model RoleUser {
  id        Int       @id @default(autoincrement())
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([roleId, userId])
  @@index([roleId, userId])
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?

  @@unique([roleId, permissionId])
  @@index([roleId, permissionId])
}

model UserPermission {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int
  expiresAt    DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?

  @@unique([userId, permissionId])
  @@index([userId, permissionId])
}

model GroupRole {
  id        Int       @id @default(autoincrement())
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    Int
  group     Group     @relation(fields: [groupId], references: [id])
  groupId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([roleId, groupId])
  @@index([roleId, groupId])
}
